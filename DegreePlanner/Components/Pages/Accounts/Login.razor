@page "/login"

@using DegreePlanner.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Antiforgery;
@attribute [RequireAntiforgeryToken]
@inject DatabaseContext database
@inject NavigationManager nav


<h3>Login</h3>
<EditForm Model="Model" OnSubmit="Authenticate" FormName="Login">
	<InputText @bind-Value="Model.Id" class="form-control" placeholder="ID" />
	<InputText @bind-Value="Model.Password" class="form-control" placeHolder="Password" type="password"/>
	<button type="submit">Log in</button>
</EditForm>


@code {
	[CascadingParameter]
	HttpContext context { get; set; }

	[SupplyParameterFromForm]
	public LoginModel Model { get; set; }

	private string error = "";

	private async Task Authenticate()
	{
		var user = database.Users.Where(x => x.UserId.ToString() == Model.Id).FirstOrDefault();
		if (user != null && user.Password == Model.Password)
		{
			var claims = new List<Claim>
			{
				new Claim(ClaimTypes.Name, Model.Id!.ToString()),
				new Claim(ClaimTypes.Role, user.Role.ToString())
			};
			var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
			var principal = new ClaimsPrincipal(identity);
			await context.SignInAsync(principal);
			nav.NavigateTo("/");
		}
		else
		{
			error = "Invalid username or password";
		}
	}

	public class LoginModel
	{
		public string? Id { get; set; }
		public string? Password { get; set; }
	}

	protected override Task OnInitializedAsync()
	{
		Model ??= new();
		return base.OnInitializedAsync();
	}
}
